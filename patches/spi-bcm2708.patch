diff --git a/drivers/spi/spi-bcm2708.c b/drivers/spi/spi-bcm2708.c
index 1744c1e..b648ab4 100644
--- a/drivers/spi/spi-bcm2708.c
+++ b/drivers/spi/spi-bcm2708.c
@@ -1,7 +1,7 @@
 /*
  * Driver for Broadcom BCM2708 SPI Controllers
  *
- * Copyright (C) 2012 Chris Boot
+ * Copyright (C) 2012 Chris Boot, Martin Sperl
  *
  * This driver is inspired by:
  * spi-ath79.c, Copyright (C) 2009-2011 Gabor Juhos <juhosg@openwrt.org>
@@ -35,6 +35,15 @@
 #include <linux/log2.h>
 #include <linux/sched.h>
 #include <linux/wait.h>
+#include <linux/dma-mapping.h>
+#include <mach/dma.h>
+
+/* module arguments to select the type of processing we do */
+#include <linux/moduleparam.h>
+static short processmode=1;
+module_param(processmode,short,0);
+MODULE_PARM_DESC(processmode,"Processing mode: 0=polling, 1=interrupt driven, 2=dma");
+
 
 /* SPI register offsets */
 #define SPI_CS			0x00
@@ -74,6 +83,37 @@
 
 #define DRV_NAME	"bcm2708_spi"
 
+#define FLAGS_FIRST_TRANSFER 0x01
+#define FLAGS_LAST_TRANSFER  0x02
+
+/* the defines that are missing in arch/arm/mach-bcm2708/include/mach/dma.h */
+/* the Base address for DMA on the (VideoCore) bus */
+#define DMA_SPI_BASE 0x7E204000
+
+/* some offset addresses */
+#ifndef BCM2708_DMA_SADDR
+#define BCM2708_DMA_SADDR 0x0C
+#endif
+#ifndef BCM2708_DMA_DADDR
+#define BCM2708_DMA_DADDR 0x10
+#endif
+#ifndef BCM2708_DMA_TLEN
+#define BCM2708_DMA_TLEN 0x14
+#endif
+/* some flags */
+#ifndef BCM2708_DMA_D_IGNORE
+#define BCM2708_DMA_D_IGNORE (1<<7)
+#endif
+#ifndef BCM2708_DMA_S_IGNORE
+#define BCM2708_DMA_S_IGNORE (1<<11)
+#endif
+
+struct bcm2708_spi_dma {
+        int chan;
+	int irq;
+	void __iomem *base;
+};
+
 struct bcm2708_spi {
 	spinlock_t lock;
 	void __iomem *base;
@@ -81,14 +121,24 @@ struct bcm2708_spi {
 	struct clk *clk;
 	bool stopping;
 
-	struct list_head queue;
-	struct workqueue_struct *workq;
-	struct work_struct work;
 	struct completion done;
 
-	const u8 *tx_buf;
-	u8 *rx_buf;
-	int len;
+	/* dma buffer structures */
+	struct bcm2708_dma_cb *dma_buffer;
+	dma_addr_t dma_buffer_handle;
+	struct bcm2708_spi_dma dma_tx;
+	struct bcm2708_spi_dma dma_rx;
+
+	/* structures from the transfer buffer needed during the transfer */
+	const char* tx_buf;
+	int tx_len;
+	char* rx_buf;
+	int rx_len;
+	int cs;
+	/* statistics counter */
+	u64 transfers_polling;
+	u64 transfers_irqdriven;
+	u64 transfers_dmadriven;
 };
 
 struct bcm2708_spi_state {
@@ -132,96 +182,9 @@ static inline void bcm2708_wr(struct bcm2708_spi *bs, unsigned reg, u32 val)
 	writel(val, bs->base + reg);
 }
 
-static inline void bcm2708_rd_fifo(struct bcm2708_spi *bs, int len)
-{
-	u8 byte;
-
-	while (len--) {
-		byte = bcm2708_rd(bs, SPI_FIFO);
-		if (bs->rx_buf)
-			*bs->rx_buf++ = byte;
-	}
-}
-
-static inline void bcm2708_wr_fifo(struct bcm2708_spi *bs, int len)
-{
-	u8 byte;
-	u16 val;
-
-	if (len > bs->len)
-		len = bs->len;
-
-	if (unlikely(bcm2708_rd(bs, SPI_CS) & SPI_CS_LEN)) {
-		/* LoSSI mode */
-		if (unlikely(len % 2)) {
-			printk(KERN_ERR"bcm2708_wr_fifo: length must be even, skipping.\n");
-			bs->len = 0;
-			return;
-		}
-		while (len) {
-			if (bs->tx_buf) {
-				val = *(const u16 *)bs->tx_buf;
-				bs->tx_buf += 2;
-			} else
-				val = 0;
-			bcm2708_wr(bs, SPI_FIFO, val);
-			bs->len -= 2;
-			len -= 2;
-		}
-		return;
-	}
-
-	while (len--) {
-		byte = bs->tx_buf ? *bs->tx_buf++ : 0;
-		bcm2708_wr(bs, SPI_FIFO, byte);
-		bs->len--;
-	}
-}
-
-static irqreturn_t bcm2708_spi_interrupt(int irq, void *dev_id)
-{
-	struct spi_master *master = dev_id;
-	struct bcm2708_spi *bs = spi_master_get_devdata(master);
-	u32 cs;
-
-	spin_lock(&bs->lock);
-
-	cs = bcm2708_rd(bs, SPI_CS);
-
-	if (cs & SPI_CS_DONE) {
-		if (bs->len) { /* first interrupt in a transfer */
-			/* fill the TX fifo with up to 16 bytes */
-			bcm2708_wr_fifo(bs, 16);
-		} else { /* transfer complete */
-			/* disable interrupts */
-			cs &= ~(SPI_CS_INTR | SPI_CS_INTD);
-			bcm2708_wr(bs, SPI_CS, cs);
-
-			/* drain RX FIFO */
-			while (cs & SPI_CS_RXD) {
-				bcm2708_rd_fifo(bs, 1);
-				cs = bcm2708_rd(bs, SPI_CS);
-			}
-
-			/* wake up our bh */
-			complete(&bs->done);
-		}
-	} else if (cs & SPI_CS_RXR) {
-		/* read 12 bytes of data */
-		bcm2708_rd_fifo(bs, 12);
-
-		/* write up to 12 bytes */
-		bcm2708_wr_fifo(bs, 12);
-	}
-
-	spin_unlock(&bs->lock);
-
-	return IRQ_HANDLED;
-}
-
 static int bcm2708_setup_state(struct spi_master *master,
-		struct device *dev, struct bcm2708_spi_state *state,
-		u32 hz, u8 csel, u8 mode, u8 bpw)
+			struct device *dev, struct bcm2708_spi_state *state,
+			u32 hz, u8 csel, u8 mode, u8 bpw)
 {
 	struct bcm2708_spi *bs = spi_master_get_devdata(master);
 	int cdiv;
@@ -284,97 +247,468 @@ static int bcm2708_setup_state(struct spi_master *master,
 	if (state) {
 		state->cs = cs;
 		state->cdiv = cdiv;
-		dev_dbg(dev, "setup: want %d Hz; "
-			"bus_hz=%lu / cdiv=%u == %lu Hz; "
-			"mode %u: cs 0x%08X\n",
-			hz, bus_hz, cdiv, bus_hz/cdiv, mode, cs);
 	}
 
 	return 0;
 }
 
-static int bcm2708_process_transfer(struct bcm2708_spi *bs,
-		struct spi_message *msg, struct spi_transfer *xfer)
-{
-	struct spi_device *spi = msg->spi;
-	struct bcm2708_spi_state state, *stp;
+static int bcm2708_register_dma(struct platform_device *pdev,
+				struct bcm2708_spi_dma * d,
+				struct bcm2708_dma_cb * dmabuffer,
+				const char* name) {
 	int ret;
-	u32 cs;
+	/* register DMA channel */
+	ret = bcm_dma_chan_alloc(BCM_DMA_FEATURE_FAST,
+				&d->base,
+				&d->irq);
+	if (ret<0) {
+		dev_err(&pdev->dev, "couldn't allocate a DMA channel\n");
+		return ret;
+	}
+	d->chan=ret;
+	/* and write info */
+	dev_info(&pdev->dev, "DMA channel %d at address 0x%08lx with irq %d\n",
+		d->chan,(unsigned long)d->base,d->irq);
+	return 0;
+}
 
-	if (bs->stopping)
-		return -ESHUTDOWN;
+static int bcm2708_release_dma(struct platform_device *pdev,
+			struct bcm2708_spi_dma * d) {
+	if (!d->base) return 0;
+	bcm_dma_chan_free(d->chan);
+	d->base=NULL;
+	d->chan=0;
+	d->irq=0;
+	return 0;
+}
 
-	if (xfer->bits_per_word || xfer->speed_hz) {
-		ret = bcm2708_setup_state(spi->master, &spi->dev, &state,
-			xfer->speed_hz ? xfer->speed_hz : spi->max_speed_hz,
-			spi->chip_select, spi->mode,
-			xfer->bits_per_word ? xfer->bits_per_word :
-				spi->bits_per_word);
-		if (ret)
-			return ret;
+static int bcm2708_register_dmabuffer(struct platform_device *pdev,
+				struct bcm2708_spi * bs) {
+	/* for this to work you need to have set the following:
+           in the bcm2708_spi_device definition:
+	   .dev = {
+	   .coherent_dma_mask = DMA_BIT_MASK(DMA_MASK_BITS_COMMON),
+	   },
+           otherwise you get the message:
+	   coherent DMA mask is unset
+	   and the allocation fails...
+	   learned the hard way, so as a hint for all
+	   who take this as a base...
+	*/
+	bs->dma_buffer= dma_alloc_writecombine(&pdev->dev,
+					SZ_4K,
+					&bs->dma_buffer_handle,
+					GFP_KERNEL);
+        if (!bs->dma_buffer) {
+                dev_err(&pdev->dev, "cannot allocate DMA CBs\n");
+                return -ENOMEM;
+        }
+	return 0;
+}
 
-		stp = &state;
-	} else {
-		stp = spi->controller_state;
-	}
+static int bcm2708_release_dmabuffer(struct platform_device *pdev,
+				struct bcm2708_spi * bs) {
+	if (!bs->dma_buffer) return 0;
+	dma_free_writecombine(&pdev->dev, SZ_4K,
+			bs->dma_buffer,
+			bs->dma_buffer_handle);
+	bs->dma_buffer=NULL;
+	bs->dma_buffer_handle=0;
+	return 0;
+}
 
-	INIT_COMPLETION(bs->done);
-	bs->tx_buf = xfer->tx_buf;
-	bs->rx_buf = xfer->rx_buf;
-	bs->len = xfer->len;
+irqreturn_t bcm2708_transfer_one_message_dma_irqhandler(int irq, void* dev) {
+	struct spi_master *master = dev;
+	struct bcm2708_spi *bs = spi_master_get_devdata(master);
+	/* mark the rx DMA-interrupt as handled
+	   - it will (level) trigger otherwise again */
+	writel(BCM2708_DMA_INT, bs->dma_rx.base+BCM2708_DMA_CS);
+
+	/* and wake up the thread to continue its work - returning ...*/
+	complete(&bs->done);
+ 	/* return IRQ handled */
+ 	return IRQ_HANDLED;
+}
+
+/* We could improve on DMA options, by chaining individual xfer messages
+   into a more complex CB chain that takes care of all the transfers in one "go"
+   resulting in only one interrupt getting delivered at the end of the sequence.
+   This would reduce the "gap" between transfers to virtually 0 (maybe one SPI clock lost)
+   at the cost of possibly saturating the AXI bus.
+   Theoretically it would be possible to chain 63 requests together using a single page
+   that way we could run say 62 4KB DMA requests and by this transfer 248 KB
+   without a single CPU cycle needed - except for the final notification IRQ.
+   (assuming that the driver requesting this is doing async transfers)
+   Assuming this, we could at a SPI bus speed of 15.625MHz
+   (core frequency of 250MHz with divider of 16)
+   we could transfer about 1.953MB/s with just 7.8 interrupts (and Engine wakeups)
+   (250MHz/16(divider)/8(bit/byte)/(62(CBs we can chain)*4(kb/CB transfer))
+   But before adding this extra complexity to make this possible
+   the driver needing this needs to get written first...
+   Note: that this would also mean that the SPI bus is really dedicated to this one device!!!
+
+   The other thing that could also help was (assuming that DMA in VideoCORE
+   does not have any errata - like on other arm platforms) if there was an
+   API that could map kernel addresses directly to BUS addresses independently
+   from if the xfer block has been allocated in the DMA region (the allocation
+   call of which returning also returns the bus address), then we could also
+   enable DMA by default on all transfers  and not only on selected ones.
+   This could help doing DMA transfers directly to user space without copying
+   - if there is an API allowing that...
+*/
+
+static int bcm2708_transfer_one_message_dma(struct spi_master *master,
+					struct bcm2708_spi_state* stp,
+					struct spi_transfer* xfer,
+					int flags
+	) {
+	struct bcm2708_spi *bs = spi_master_get_devdata(master);
+	struct bcm2708_dma_cb *cbs=bs->dma_buffer;
+	u32 cs=0;
+	/* calculate dma transfer sizes - words */
+	int dmaleninitial=4;
+	int dmalen=xfer->len;
+	/* if size <=0 then return immediately and OK - nothing to do*/
+	if (xfer->len<=0) {return 0; }
+
+	/* increment type counter */
+	bs->transfers_dmadriven++;
+
+	/* check for length - one page size max !!! */
+	if (xfer->len>4096) {
+		dev_err(&master->dev,"Max allowed package size exceeded");
+		return -EINVAL;
+	}
+	/* on first transfer reset the RX/TX */
+	cs=stp->cs|SPI_CS_DMAEN;
+	if (flags&FLAGS_FIRST_TRANSFER) {
+		bcm2708_wr(bs, SPI_CS, cs | SPI_CS_CLEAR_RX | SPI_CS_CLEAR_TX);
+	}
+	/* auto deselect CS if it is the last */
+	if (flags&FLAGS_LAST_TRANSFER) { cs|=SPI_CS_ADCS; }
 
-	cs = stp->cs | SPI_CS_INTR | SPI_CS_INTD | SPI_CS_TA;
+	/* store data for interrupts and more */
+	bs->rx_buf=xfer->rx_buf;
+	bs->tx_buf=xfer->tx_buf;
+	bs->rx_len=xfer->len;
+	bs->tx_len=xfer->len;
+	bs->cs=cs;
 
+	/* now set up the Registers */
 	bcm2708_wr(bs, SPI_CLK, stp->cdiv);
 	bcm2708_wr(bs, SPI_CS, cs);
 
-	ret = wait_for_completion_timeout(&bs->done,
-			msecs_to_jiffies(SPI_TIMEOUT_MS));
-	if (ret == 0) {
-		dev_err(&spi->dev, "transfer timed out\n");
+	/* start filling in the CBs */
+	/* first set up the flags for the fifo
+	   - needs to be set 256 bit alligned, so abusing the first cb */
+	cbs[0].info=(xfer->len<<16) /* the length in bytes to transfer */
+		| ( cs&0xff ) /* the bottom 8 bit flags for the SPI interface */
+		| SPI_CS_TA; /* and enable transfer */
+
+	/* tx info - set len/flags in the first CB */
+	cbs[1].info=BCM2708_DMA_PER_MAP(6) /* DREQ 6 = SPI TX in PERMAP */
+		| BCM2708_DMA_D_DREQ; /* destination DREQ trigger */
+	cbs[1].src=bs->dma_buffer_handle+0*sizeof(struct bcm2708_dma_cb);
+	cbs[1].dst=(unsigned long)(DMA_SPI_BASE+SPI_FIFO);
+	cbs[1].length=dmaleninitial;
+	cbs[1].stride=0;
+	cbs[1].next=bs->dma_buffer_handle+2*sizeof(struct bcm2708_dma_cb);
+	/* and the tx-data in the second CB */
+	cbs[2].info=cbs[1].info;
+	if (xfer->tx_buf) {
+		cbs[2].info|=BCM2708_DMA_S_INC; /* source increment by 4 */
+		cbs[2].src=(unsigned long)xfer->tx_dma;
+	} else {
+		cbs[3].info|=BCM2708_DMA_S_IGNORE; /* ignore source */
+		cbs[2].src=bs->dma_buffer_handle+127*sizeof(struct bcm2708_dma_cb);
+	}
+	cbs[2].dst=cbs[1].dst;
+        cbs[2].length=dmalen;
+	cbs[2].stride=0;
+	cbs[2].next=(unsigned long)0;
+	/* and here the RX Data */
+	/* rx info - set bytes/clock */
+	cbs[3].info=BCM2708_DMA_PER_MAP(7) /* DREQ 7 = SPI RX in PERMAP */
+		| BCM2708_DMA_S_DREQ /* source DREQ trigger */
+		| BCM2708_DMA_INT_EN; /* enable interrupt */
+	if (xfer->rx_buf) {
+		cbs[3].info|=BCM2708_DMA_D_INC; /* destination increment by 4 */
+		cbs[3].dst=(unsigned long)xfer->rx_dma;
+	} else {
+		cbs[3].info|=BCM2708_DMA_D_IGNORE; /* ignore destination */
+	}
+	cbs[3].src=cbs[1].dst;
+        cbs[3].length=xfer->len;
+	cbs[3].stride=0;
+	cbs[3].next=(unsigned long)0;
+	/* initialize done */
+	INIT_COMPLETION(bs->done);
+	/* write CB to process */
+	writel(
+		bs->dma_buffer_handle+3*sizeof(struct bcm2708_dma_cb),
+		bs->dma_rx.base+BCM2708_DMA_ADDR
+		);
+	writel(
+		bs->dma_buffer_handle+1*sizeof(struct bcm2708_dma_cb),
+		bs->dma_tx.base+BCM2708_DMA_ADDR
+		);
+	dsb();
+	/* start DMA - this should also enable the DMA */
+	writel(BCM2708_DMA_ACTIVE, bs->dma_tx.base+BCM2708_DMA_CS);
+	writel(BCM2708_DMA_ACTIVE, bs->dma_rx.base+BCM2708_DMA_CS);
+
+	/* now we are running - waiting to get woken by interrupt */
+	/* the timeout may be too short - depend on amount of data and frequency... */
+	if (wait_for_completion_timeout(
+			&bs->done,
+			msecs_to_jiffies(SPI_TIMEOUT_MS*10)) == 0) {
+		/* clear cs */
+
+		/* inform of event and return with error */
+		dev_err(&master->dev, "DMA transfer timed out");
+		/* need to abort Interrupts */
+		bcm_dma_abort(bs->dma_tx.base);
+		bcm_dma_abort(bs->dma_rx.base);
 		return -ETIMEDOUT;
 	}
+	/* and return */
+	return 0;
+}
+
+static irqreturn_t bcm2708_transfer_one_message_irqdriven_irqhandler(int irq, void *dev_id) {
+
+	struct spi_master *master=dev_id;
+	char b;
+	struct bcm2708_spi *bs = spi_master_get_devdata(master);
+	spin_lock(&bs->lock);
+	/* if we got more data then write */
+	while ((bs->tx_len>0)&&(bcm2708_rd(bs, SPI_CS)&SPI_CS_TXD)) {
+		/* decide on data to send */
+		if (bs->tx_buf) { b=*(bs->tx_buf);(bs->tx_buf)++; } else {b=0;}
+		bcm2708_wr(bs,SPI_FIFO,b);
+		/* and decrement rx_len */
+		(bs->tx_len)--;
+	}
+	/* check for reads */
+	while (bcm2708_rd(bs, SPI_CS)&SPI_CS_RXD) {
+		/* getting byte from fifo */
+		b=bcm2708_rd(bs,SPI_FIFO);
+		/* store it if requested */
+		if (bs->rx_buf) { *(bs->rx_buf)=b;(bs->rx_buf)++; }
+		/* and decrement rx_len */
+		(bs->rx_len)--;
+	}
+	spin_unlock(&bs->lock);
 
-	if (xfer->delay_usecs)
-		udelay(xfer->delay_usecs);
+	/* and if we have rx_len as 0 then wakeup the process */
+	if (bs->rx_len==0) {
+		/* clean the transfers including all interrupts */
+		bs->cs &= (~SPI_CS_TA);
+		bcm2708_wr(bs, SPI_CS,bs->cs);
+		/* and wake up the thread to continue its work */
+		complete(&bs->done);
+	}
+
+	/* return IRQ handled */
+	return IRQ_HANDLED;
+}
 
-	if (list_is_last(&xfer->transfer_list, &msg->transfers) ||
-			xfer->cs_change) {
-		/* clear TA and interrupt flags */
-		bcm2708_wr(bs, SPI_CS, stp->cs);
+static int bcm2708_transfer_one_message_irqdriven(struct spi_master *master,
+						struct bcm2708_spi_state* stp,
+						struct spi_transfer* xfer,
+						int flags
+	) {
+	volatile u32 cs;
+	char b;
+	struct bcm2708_spi *bs = spi_master_get_devdata(master);
+	unsigned long iflags;
+	/* increment type counter */
+	bs->transfers_irqdriven++;
+
+	/* store the data somewhere where the interrupt handler can see it */
+	bs->tx_buf=xfer->tx_buf;
+	bs->tx_len=xfer->len;
+	bs->rx_buf=xfer->rx_buf;
+	bs->rx_len=xfer->len;
+	bs->cs=stp->cs;
+
+	/* if we are not the last xfer - keep flags when done */
+	if (!(flags | FLAGS_LAST_TRANSFER)) {
+		bs->cs|=SPI_CS_INTR|SPI_CS_INTD;
 	}
 
-	msg->actual_length += (xfer->len - bs->len);
+	/* set up the spinlock - do we really need to disable interrupts here?*/
+	spin_lock_irqsave(&bs->lock,iflags);
+
+	/* start by setting up the SPI controller */
+	cs=stp->cs|SPI_CS_TA|SPI_CS_INTR|SPI_CS_INTD;
+	bcm2708_wr(bs, SPI_CLK, stp->cdiv);
+	bcm2708_wr(bs, SPI_CS, cs);
 
+	/* fill as much of a buffer as possible */
+	while ((bcm2708_rd(bs, SPI_CS)&SPI_CS_TXD)&&(bs->tx_len>0)) {
+		/* store it if requested */
+		if (bs->tx_buf) { b=*(bs->tx_buf);bs->tx_buf++; } else {b=0;}
+		bcm2708_wr(bs,SPI_FIFO,b);
+		/* and decrement rx_len */
+		bs->tx_len--;
+	}
+
+	/* now enable the interrupts after we have initialized completion */
+	INIT_COMPLETION(bs->done);
+	spin_unlock_irqrestore(&bs->lock,iflags);
+
+	/* and wait for last interrupt to wake us up */
+	if (wait_for_completion_timeout(&bs->done,
+						msecs_to_jiffies(SPI_TIMEOUT_MS)) == 0) {
+		dev_err(&master->dev, "transfer timed out\n");
+		return -ETIMEDOUT;
+	}
+
+	/* and return */
 	return 0;
 }
 
-static void bcm2708_work(struct work_struct *work)
-{
-	struct bcm2708_spi *bs = container_of(work, struct bcm2708_spi, work);
-	unsigned long flags;
-	struct spi_message *msg;
-	struct spi_transfer *xfer;
-	int status = 0;
+static int bcm2708_transfer_one_message_poll(struct spi_master *master,
+					struct bcm2708_spi_state* stp,
+					struct spi_transfer* xfer,
+					int flags
+	) {
+	volatile u32 cs;
+	char b;
+	const char* tx_buf=xfer->tx_buf;
+	int tx_len=xfer->len;
+	char* rx_buf=xfer->rx_buf;
+	int rx_len=xfer->len;
+
+	struct bcm2708_spi *bs = spi_master_get_devdata(master);
 
-	spin_lock_irqsave(&bs->lock, flags);
-	while (!list_empty(&bs->queue)) {
-		msg = list_first_entry(&bs->queue, struct spi_message, queue);
-		list_del_init(&msg->queue);
-		spin_unlock_irqrestore(&bs->lock, flags);
+	/* increment type counter */
+	bs->transfers_polling++;
 
-		list_for_each_entry(xfer, &msg->transfers, transfer_list) {
-			status = bcm2708_process_transfer(bs, msg, xfer);
-			if (status)
+	/* start by setting up the SPI controller */
+	cs=stp->cs|SPI_CS_TA;
+	bcm2708_wr(bs, SPI_CLK, stp->cdiv);
+	bcm2708_wr(bs, SPI_CS, cs);
+	/* loop until rxlen is 0 */
+	while ((rx_len>0)) {
+		cs=bcm2708_rd(bs, SPI_CS);
+		if (cs&SPI_CS_TXD) {
+			if (tx_len>0) {
+				/* decide on data to send */
+				if (tx_buf) { b=*tx_buf;tx_buf++; } else {b=0;}
+				bcm2708_wr(bs,SPI_FIFO,b);
+				/* and decrement rx_len */
+				tx_len--;
+			}
+		}
+		if (cs&SPI_CS_RXD) {
+			/* getting byte from fifo */
+			b=bcm2708_rd(bs,SPI_FIFO);
+			/* store it if requested */
+			if (rx_buf) { *rx_buf=b;rx_buf++; }
+			/* and decrement rx_len */
+			rx_len--;
+		}
+	}
+	/* and release cs */
+	bcm2708_wr(bs, SPI_CS, stp->cs);
+	/* and return OK */
+	return 0;
+}
+
+/* this one sends a message */
+static int bcm2708_transfer_one_message(struct spi_master *master,
+					struct spi_message* msg) {
+	struct spi_transfer *xfer;
+	struct bcm2708_spi *bs = spi_master_get_devdata(master);
+	struct spi_device* spi=msg->spi;
+	struct bcm2708_spi_state state;
+	int status=0;
+	int count=0;
+	int transfers=0;
+	list_for_each_entry(xfer, &msg->transfers, transfer_list) { transfers++; }
+
+	/* loop all the transfer entries to check for transfer issues first */
+	list_for_each_entry(xfer, &msg->transfers, transfer_list) {
+		int can_dma=1;
+		int flags=0;
+		/* increment count */
+		count++;
+		/* calculate flags */
+		if (count==1) {
+			/* clear the queues */
+			bcm2708_wr(bs, SPI_CS, bcm2708_rd(bs, SPI_CS) | SPI_CS_CLEAR_RX | SPI_CS_CLEAR_TX);
+			flags|=FLAGS_FIRST_TRANSFER;
+		}
+		if (count==transfers) { flags|=FLAGS_LAST_TRANSFER; }
+		/* check if elegable for DMA */
+		if ((xfer->tx_buf)&&(!xfer->tx_dma)) { can_dma=0; }
+		if ((xfer->rx_buf)&&(!xfer->rx_dma)) { can_dma=0; }
+
+		/* configure SPI - use global settings if not explicitly set */
+		if (xfer->bits_per_word || xfer->speed_hz) {
+			status = bcm2708_setup_state(spi->master, &spi->dev, &state,
+						xfer->speed_hz ? xfer->speed_hz : spi->max_speed_hz,
+						spi->chip_select, spi->mode,
+						xfer->bits_per_word ? xfer->bits_per_word :
+						spi->bits_per_word);
+		} else {
+			state.cs=((struct bcm2708_spi_state*)spi->controller_state)->cs;
+			state.cdiv=((struct bcm2708_spi_state*)spi->controller_state)->cdiv;
+		}
+		if (status)
+			goto exit;
+		/* keep Transfer active until we are triggering the last one */
+		if (!(flags&FLAGS_LAST_TRANSFER)) { state.cs|= SPI_CS_TA; }
+		/* now send the message over SPI */
+		switch (processmode) {
+		case 0: /* polling */
+			status=bcm2708_transfer_one_message_poll(
+				master,&state,xfer,flags);
+			break;
+		case 1: /* interrupt driven */
+			status=bcm2708_transfer_one_message_irqdriven(
+				master,&state,xfer,flags);
+			break;
+		case 2: /* dma driven */
+			if (can_dma) {
+				status=bcm2708_transfer_one_message_dma(
+					master,&state,xfer,flags
+					);
+				break;
+			} else {
+				status=bcm2708_transfer_one_message_irqdriven(
+					master,&state,xfer,flags
+					);
 				break;
+			}
+		default:
+			/* by default use the interrupt version */
+			status=bcm2708_transfer_one_message_irqdriven(
+				master,&state,xfer,flags);
+			break;
 		}
+		if (status)
+			goto exit;
+		/* delay if given */
+	        if (xfer->delay_usecs)
+        	        udelay(xfer->delay_usecs);
+		/* and add up the result */
+		msg->actual_length += xfer->len;
+	}
+exit:
+	msg->status = status;
+	spi_finalize_current_message(master);
+	return status;
+}
 
-		msg->status = status;
-		msg->complete(msg->context);
+static int bcm2708_prepare_transfer(struct spi_master *master) {
+	return 0;
+}
 
-		spin_lock_irqsave(&bs->lock, flags);
-	}
-	spin_unlock_irqrestore(&bs->lock, flags);
+static int bcm2708_unprepare_transfer(struct spi_master *master) {
+	return 0;
 }
 
 static int bcm2708_spi_setup(struct spi_device *spi)
@@ -383,11 +717,13 @@ static int bcm2708_spi_setup(struct spi_device *spi)
 	struct bcm2708_spi_state *state;
 	int ret;
 
+	// configure master
+
 	if (bs->stopping)
 		return -ESHUTDOWN;
 
 	if (!(spi->mode & SPI_NO_CS) &&
-			(spi->chip_select > spi->master->num_chipselect)) {
+		(spi->chip_select > spi->master->num_chipselect)) {
 		dev_dbg(&spi->dev,
 			"setup: invalid chipselect %u (%u defined)\n",
 			spi->chip_select, spi->master->num_chipselect);
@@ -404,12 +740,11 @@ static int bcm2708_spi_setup(struct spi_device *spi)
 	}
 
 	ret = bcm2708_setup_state(spi->master, &spi->dev, state,
-		spi->max_speed_hz, spi->chip_select, spi->mode,
-		spi->bits_per_word);
+				spi->max_speed_hz, spi->chip_select, spi->mode,
+				spi->bits_per_word);
 	if (ret < 0) {
 		kfree(state);
 		spi->controller_state = NULL;
-                return ret;
 	}
 
 	dev_dbg(&spi->dev,
@@ -420,48 +755,6 @@ static int bcm2708_spi_setup(struct spi_device *spi)
 	return 0;
 }
 
-static int bcm2708_spi_transfer(struct spi_device *spi, struct spi_message *msg)
-{
-	struct bcm2708_spi *bs = spi_master_get_devdata(spi->master);
-	struct spi_transfer *xfer;
-	int ret;
-	unsigned long flags;
-
-	if (unlikely(list_empty(&msg->transfers)))
-		return -EINVAL;
-
-	if (bs->stopping)
-		return -ESHUTDOWN;
-
-	list_for_each_entry(xfer, &msg->transfers, transfer_list) {
-		if (!(xfer->tx_buf || xfer->rx_buf) && xfer->len) {
-			dev_dbg(&spi->dev, "missing rx or tx buf\n");
-			return -EINVAL;
-		}
-
-		if (!xfer->bits_per_word || xfer->speed_hz)
-			continue;
-
-		ret = bcm2708_setup_state(spi->master, &spi->dev, NULL,
-			xfer->speed_hz ? xfer->speed_hz : spi->max_speed_hz,
-			spi->chip_select, spi->mode,
-			xfer->bits_per_word ? xfer->bits_per_word :
-				spi->bits_per_word);
-		if (ret)
-			return ret;
-	}
-
-	msg->status = -EINPROGRESS;
-	msg->actual_length = 0;
-
-	spin_lock_irqsave(&bs->lock, flags);
-	list_add_tail(&msg->queue, &bs->queue);
-	queue_work(bs->workq, &bs->work);
-	spin_unlock_irqrestore(&bs->lock, flags);
-
-	return 0;
-}
-
 static void bcm2708_spi_cleanup(struct spi_device *spi)
 {
 	if (spi->controller_state) {
@@ -477,6 +770,7 @@ static int __devinit bcm2708_spi_probe(struct platform_device *pdev)
 	struct clk *clk;
 	struct spi_master *master;
 	struct bcm2708_spi *bs;
+	const char* mode;
 
 	regs = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!regs) {
@@ -510,16 +804,25 @@ static int __devinit bcm2708_spi_probe(struct platform_device *pdev)
 	master->bus_num = pdev->id;
 	master->num_chipselect = 3;
 	master->setup = bcm2708_spi_setup;
-	master->transfer = bcm2708_spi_transfer;
 	master->cleanup = bcm2708_spi_cleanup;
+	master->rt =1;
+
+	master->prepare_transfer_hardware       = bcm2708_prepare_transfer;
+	master->transfer_one_message            = bcm2708_transfer_one_message;
+	master->unprepare_transfer_hardware     = bcm2708_unprepare_transfer;
+
 	platform_set_drvdata(pdev, master);
 
 	bs = spi_master_get_devdata(master);
-
 	spin_lock_init(&bs->lock);
-	INIT_LIST_HEAD(&bs->queue);
 	init_completion(&bs->done);
-	INIT_WORK(&bs->work, bcm2708_work);
+
+	/* set counters */
+	bs->transfers_polling=0;
+	bs->transfers_irqdriven=0;
+	bs->transfers_dmadriven=0;
+
+	/* get Register Map */
 
 	bs->base = ioremap(regs->start, resource_size(regs));
 	if (!bs->base) {
@@ -527,21 +830,46 @@ static int __devinit bcm2708_spi_probe(struct platform_device *pdev)
 		goto out_master_put;
 	}
 
-	bs->workq = create_singlethread_workqueue(dev_name(&pdev->dev));
-	if (!bs->workq) {
-		dev_err(&pdev->dev, "could not create workqueue\n");
-		goto out_iounmap;
-	}
-
 	bs->irq = irq;
 	bs->clk = clk;
 	bs->stopping = false;
 
-	err = request_irq(irq, bcm2708_spi_interrupt, 0, dev_name(&pdev->dev),
+	err = request_irq(irq,
+			bcm2708_transfer_one_message_irqdriven_irqhandler,
+			0,
+			dev_name(&pdev->dev),
+			master);
+	if (err) {
+		dev_err(&pdev->dev, "could not request IRQ: %d\n", err);
+		goto out_iounmap;
+	}
+
+	/* enable DMA */
+	/* register memory buffer for DMA */
+	if ((err=bcm2708_register_dmabuffer(pdev,bs)))
+		goto out_free_irq;
+	/* register channels and irq */
+	if ((err=bcm2708_register_dma(pdev,
+						&bs->dma_rx,
+						bs->dma_buffer,
+						DRV_NAME "(rxDMA)"
+				)))
+		goto out_free_dma_buffer;
+	if ((err=bcm2708_register_dma(pdev,
+						&bs->dma_tx,
+						bs->dma_buffer,
+						DRV_NAME "(txDMA)"
+				)))
+		goto out_free_dma_rx;
+	/* register IRQ for RX dma channel  */
+	err = request_irq(bs->dma_rx.irq,
+			bcm2708_transfer_one_message_dma_irqhandler,
+			0,
+			dev_name(&pdev->dev),
 			master);
 	if (err) {
 		dev_err(&pdev->dev, "could not request IRQ: %d\n", err);
-		goto out_workqueue;
+		goto out_free_dma_tx;
 	}
 
 	/* initialise the hardware */
@@ -551,18 +879,36 @@ static int __devinit bcm2708_spi_probe(struct platform_device *pdev)
 	err = spi_register_master(master);
 	if (err) {
 		dev_err(&pdev->dev, "could not register SPI master: %d\n", err);
-		goto out_free_irq;
+		goto out_free_dma_irq;
 	}
 
 	dev_info(&pdev->dev, "SPI Controller at 0x%08lx (irq %d)\n",
 		(unsigned long)regs->start, irq);
 
+	/* now send the message over SPI */
+	switch (processmode) {
+	case 0:  mode="polling"; break;
+	case 1:  mode="interrupt-driven"; break;
+	case 2:  mode="dma"; break;
+	default: /* for unsupported modes return with errors */
+		dev_err(&pdev->dev, "Unsupported processmode %i\n",
+			processmode);
+		goto out_free_dma_irq;
+		break;
+	}
+	dev_info(&pdev->dev, "SPI Controller running in %s mode\n",mode);
 	return 0;
 
+out_free_dma_irq:
+	free_irq(bs->dma_rx.irq, master);
+out_free_dma_tx:
+	bcm2708_release_dma(pdev,&bs->dma_tx);
+out_free_dma_rx:
+	bcm2708_release_dma(pdev,&bs->dma_rx);
+out_free_dma_buffer:
+	bcm2708_release_dmabuffer(pdev,bs);
 out_free_irq:
 	free_irq(bs->irq, master);
-out_workqueue:
-	destroy_workqueue(bs->workq);
 out_iounmap:
 	iounmap(bs->base);
 out_master_put:
@@ -577,19 +923,29 @@ static int __devexit bcm2708_spi_remove(struct platform_device *pdev)
 	struct spi_master *master = platform_get_drvdata(pdev);
 	struct bcm2708_spi *bs = spi_master_get_devdata(master);
 
+	/* first report on usage */
+	dev_info(&pdev->dev,"SPI Bus statistics: %llu poll %llu interrupt and %llu dma driven messages\n",
+		bs->transfers_polling,
+		bs->transfers_irqdriven,
+		bs->transfers_dmadriven
+		);
+
 	/* reset the hardware and block queue progress */
-	spin_lock_irq(&bs->lock);
 	bs->stopping = true;
 	bcm2708_wr(bs, SPI_CS, SPI_CS_CLEAR_RX | SPI_CS_CLEAR_TX);
-	spin_unlock_irq(&bs->lock);
-
-	flush_work_sync(&bs->work);
 
 	clk_disable(bs->clk);
 	clk_put(bs->clk);
 	free_irq(bs->irq, master);
 	iounmap(bs->base);
 
+	/* release DMA */
+	free_irq(bs->dma_rx.irq, master);
+	bcm2708_release_dma(pdev,&bs->dma_tx);
+	bcm2708_release_dma(pdev,&bs->dma_rx);
+	bcm2708_release_dmabuffer(pdev,bs);
+
+	/* and unregister device */
 	spi_unregister_master(master);
 
 	return 0;
@@ -607,6 +963,10 @@ static struct platform_driver bcm2708_spi_driver = {
 
 static int __init bcm2708_spi_init(void)
 {
+	/* range check for processmode */
+	if ((processmode<0) || (processmode>3)) {
+		processmode=1;
+	}
 	return platform_driver_probe(&bcm2708_spi_driver, bcm2708_spi_probe);
 }
 module_init(bcm2708_spi_init);
@@ -617,10 +977,9 @@ static void __exit bcm2708_spi_exit(void)
 }
 module_exit(bcm2708_spi_exit);
 
-
 //module_platform_driver(bcm2708_spi_driver);
 
 MODULE_DESCRIPTION("SPI controller driver for Broadcom BCM2708");
-MODULE_AUTHOR("Chris Boot <bootc@bootc.net>");
+MODULE_AUTHOR("Chris Boot <bootc@bootc.net>, Martin Sperl");
 MODULE_LICENSE("GPL v2");
 MODULE_ALIAS("platform:" DRV_NAME);
